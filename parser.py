import asyncio
import logging
import json
import os
from telethon import TelegramClient, events
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from config import API_ID, API_HASH, SESSION_NAME, TELEGRAM_BOT_TOKEN, ADMIN_CHAT_IDS
from db import add_post, get_unnotified_posts, mark_posts_notified
from dotenv import load_dotenv
load_dotenv()

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üå± –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∏ aiogram
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ channels.json
def load_channels():
    try:
        with open("channels.json", "r", encoding="utf-8") as f:
            channels = json.load(f)
        if not channels:
            raise ValueError("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
        return channels
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return []

SOURCE_CHANNELS = load_channels()
logger.info(f"üéØ –ö–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {SOURCE_CHANNELS}")

if not SOURCE_CHANNELS:
    logger.warning("‚ö†Ô∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞.")
    exit()

# üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.NewMessage(chats=SOURCE_CHANNELS))
async def handler(event):
    logger.info("üö® –°—Ä–∞–±–æ—Ç–∞–ª handler –æ—Ç Telethon!")

    raw_text = event.message.message
    source = event.chat.username or event.chat.title or str(event.chat_id)

    logger.info(f"üÜï –ù–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ {source}")
    post_id = add_post(source, raw_text)
    logger.info(f"üì• –ü–æ—Å—Ç #{post_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î")

    # üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    unnotified = get_unnotified_posts()
    if unnotified:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data="start_moderation")]
        ])
        for admin_id in ADMIN_CHAT_IDS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=f"üì• –ü–æ–ª—É—á–µ–Ω–æ <b>{len(unnotified)}</b> –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.",
                    reply_markup=keyboard
                )
                logger.info(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        mark_posts_notified(unnotified)

# üß™ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def debug_session_info():
    await client.start()
    me = await client.get_me()
    logger.info(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.username or me.id}")
    dialogs = await client.get_dialogs()
    for dialog in dialogs:
        if dialog.is_channel:
            logger.info(f"üì° –ö–∞–Ω–∞–ª: {dialog.name} ‚Äî {dialog.entity.username or dialog.id}")

# üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
async def main():
    await client.start()
    await debug_session_info()
    logger.info(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º: {', '.join(SOURCE_CHANNELS)}")
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
