import sqlite3
import json
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DB_PATH = "news.db"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# --- –¢–∞–±–ª–∏—Ü–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ ---
cursor.execute("""
CREATE TABLE IF NOT EXISTS news (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    source_id TEXT,
    raw_text TEXT,
    styled_text TEXT,
    status TEXT,
    notified INTEGER DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
)
""")

# --- –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ---
cursor.execute("""
CREATE TABLE IF NOT EXISTS moderation_session (
    admin_id INTEGER PRIMARY KEY,
    post_ids TEXT,
    current_index INTEGER
)
""")

conn.commit()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ ---

def add_post(source_id, raw_text):
    cursor.execute("""
        INSERT INTO news (source_id, raw_text, styled_text, status)
        VALUES (?, ?, ?, ?)
    """, (source_id, raw_text, raw_text, "new"))
    conn.commit()
    post_id = cursor.lastrowid
    logger.info(f"üÜï –ü–æ—Å—Ç {post_id} –¥–æ–±–∞–≤–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ {source_id}")
    return post_id


def get_new_posts():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    cursor.execute("SELECT id FROM news WHERE status IN ('new', 'pending', 'skipped')")
    return [row[0] for row in cursor.fetchall()]

def set_post_status(post_id, status):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞"""
    cursor.execute("UPDATE news SET status = ? WHERE id = ?", (status, post_id))
    conn.commit()
    logger.info(f"üîÑ –°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ {post_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}")

def get_post(post_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å—Ç –ø–æ ID"""
    cursor.execute("SELECT * FROM news WHERE id = ?", (post_id,))
    post = cursor.fetchone()
    if not post:
        logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return post

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ ---

def create_session(admin_id, post_ids):
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    post_ids_json = json.dumps(post_ids)
    cursor.execute("""
        INSERT OR REPLACE INTO moderation_session (admin_id, post_ids, current_index)
        VALUES (?, ?, ?)
    """, (admin_id, post_ids_json, 0))
    conn.commit()
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id} —Å {len(post_ids)} –ø–æ—Å—Ç–∞–º–∏")

def get_current_post_for_admin(admin_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ —Å–µ—Å—Å–∏–∏"""
    cursor.execute("SELECT post_ids, current_index FROM moderation_session WHERE admin_id = ?", (admin_id,))
    row = cursor.fetchone()
    if not row:
        return None
    post_ids, index = json.loads(row[0]), row[1]
    if index >= len(post_ids):
        return None
    return post_ids[index]

def advance_session(admin_id):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Å—Ç—É"""
    cursor.execute("UPDATE moderation_session SET current_index = current_index + 1 WHERE admin_id = ?", (admin_id,))
    conn.commit()
    logger.info(f"‚û°Ô∏è –°–µ—Å—Å–∏—è –∞–¥–º–∏–Ω–∞ {admin_id} –ø–µ—Ä–µ—à–ª–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Å—Ç—É")

def end_session(admin_id):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é"""
    cursor.execute("DELETE FROM moderation_session WHERE admin_id = ?", (admin_id,))
    conn.commit()
    logger.info(f"üèÅ –°–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞ {admin_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def get_session_index(admin_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –ø–æ—Å—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏"""
    cursor.execute("SELECT current_index FROM moderation_session WHERE admin_id = ?", (admin_id,))
    row = cursor.fetchone()
    return row[0] if row else 0

def get_session_total(admin_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ —Å–µ—Å—Å–∏–∏"""
    cursor.execute("SELECT post_ids FROM moderation_session WHERE admin_id = ?", (admin_id,))
    row = cursor.fetchone()
    return len(json.loads(row[0])) if row else 0

def get_unnotified_posts():
    cursor.execute("SELECT id FROM news WHERE notified = 0 AND status = 'new'")
    posts = [row[0] for row in cursor.fetchall()]
    if posts:
        logger.info(f"üîî –ù–∞–π–¥–µ–Ω–æ {len(posts)} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
    return posts

def mark_posts_notified(post_ids):
    if post_ids:
        cursor.executemany("UPDATE news SET notified = 1 WHERE id = ?", [(pid,) for pid in post_ids])
        conn.commit()
        logger.info(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ {len(post_ids)} –ø–æ—Å—Ç–æ–≤ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ")