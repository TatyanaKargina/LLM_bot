from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
import json
import os
import asyncio
import logging

from config import ADMIN_CHAT_IDS
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ChannelManagement(StatesGroup):
    adding_channels = State()
    deleting_channels = State()


menu_router = Router()
monitoring_active = set()
CHANNELS_FILE = "channels.json"
logger = logging.getLogger(__name__)


def load_channels():
    if not os.path.exists(CHANNELS_FILE):
        return []
    with open(CHANNELS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def save_channels(channels):
    with open(CHANNELS_FILE, "w", encoding="utf-8") as f:
        json.dump(channels, f)


def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì° –ö–∞–Ω–∞–ª—ã", callback_data="manage_channels")],
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", callback_data="start_monitoring")],
        [InlineKeyboardButton(text="üìù –ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤", callback_data="go_to_moderation")]
    ])


@menu_router.message(CommandStart())
async def start_menu(message: types.Message):
    if message.from_user.id not in ADMIN_CHAT_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())


@menu_router.message(Command("clear"))
async def clear_command(message: Message):
    if message.from_user.id not in ADMIN_CHAT_IDS:
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    try:
        await message.delete()
    except Exception as e:
        pass

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    MAX_MESSAGES_TO_DELETE = 200

    deleted = 0
    try:
        async for msg in message.bot.get_chat_history(message.chat.id, limit=MAX_MESSAGES_TO_DELETE):
            try:
                await message.bot.delete_message(message.chat.id, msg.message_id)
                deleted += 1
                # –ù–µ–±–æ–ª—å—à–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
                if deleted % 10 == 0:
                    await asyncio.sleep(0.3)
            except Exception:
                continue
    except Exception as e:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await message.answer("üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())


@menu_router.callback_query(F.data == "manage_channels")
async def show_channels(callback: types.CallbackQuery):
    channels = load_channels()
    channel_list = "\n".join(channels) if channels else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_channel")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="delete_channel")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    await callback.message.edit_text(
        f"üì° –¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n{channel_list}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@menu_router.callback_query(F.data == "add_channel")
async def prompt_add_channel(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ChannelManagement.adding_channels)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_channel_operation")]
    ])
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª:",
        reply_markup=keyboard
    )


@menu_router.callback_query(F.data == "delete_channel")
async def show_delete_channel_menu(callback: types.CallbackQuery):
    channels = load_channels()
    if not channels:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_channels")]
            ])
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    keyboard = []
    for channel in channels:
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚ùå {channel}",
                callback_data=f"remove_channel_{channel}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_channels")])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@menu_router.callback_query(F.data.startswith("remove_channel_"))
async def remove_channel(callback: types.CallbackQuery):
    channel_to_remove = callback.data.replace("remove_channel_", "")
    channels = load_channels()

    if channel_to_remove in channels:
        channels.remove(channel_to_remove)
        save_channels(channels)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        temp_message = await callback.message.edit_text(f"–ö–∞–Ω–∞–ª {channel_to_remove} —É–¥–∞–ª–µ–Ω.")

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤
        await asyncio.sleep(1)
        await show_delete_channel_menu(callback)
    else:
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")


@menu_router.callback_query(F.data == "cancel_channel_operation")
async def cancel_channel_operation(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())


@menu_router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.edit_text("üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())


@menu_router.message(ChannelManagement.adding_channels)
async def handle_add_channels(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception:
        pass

    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    # ...

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
    data = await state.get_data()
    instruction_message_id = data.get('instruction_message_id')
    if instruction_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=instruction_message_id)
        except Exception:
            pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –µ–≥–æ
    status_message = await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    await asyncio.sleep(1)
    try:
        await status_message.delete()
    except Exception:
        pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    await state.clear()


@menu_router.message(ChannelManagement.deleting_channels)
async def handle_delete_channels(message: types.Message, state: FSMContext):
    input_text = message.text.strip()
    channels = load_channels()

    input_channels = [c.strip().lstrip("@") for c in input_text.replace(",", " ").split()]
    removed = [f"@{c}" for c in input_channels if f"@{c}" in channels]
    channels = [c for c in channels if c not in removed]
    save_channels(channels)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –µ–≥–æ
    status_msg = await message.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(removed)}")
    await state.clear()

    main_menu_msg = await message.answer("üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    await asyncio.sleep(2)
    try:
        await status_msg.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


@menu_router.callback_query(F.data == "start_monitoring")
async def start_monitoring(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id in monitoring_active:
        text = "üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω."
    else:
        monitoring_active.add(user_id)
        text = "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω."

    keyboard = [
        [InlineKeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="stop_monitoring")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))


@menu_router.callback_query(F.data == "stop_monitoring")
async def stop_monitoring(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    monitoring_active.discard(user_id)
    await callback.message.edit_text(
        "üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
        reply_markup=get_main_menu()
    )