import sqlite3
import logging
import asyncio
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import ADMIN_CHAT_IDS, TARGET_CHANNEL_ID
from db import (
    get_new_posts, create_session, get_post,
    get_current_post_for_admin, set_post_status,
    get_session_index, get_session_total,
    advance_session
)
from gemini import revise_text_with_chatgpt  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from menu_router import get_main_menu  # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


class GeminiProcessing(StatesGroup):
    waiting_for_comment = State()


logger = logging.getLogger(__name__)

moderation_router = Router()
pending_gemini_comments = {}


@moderation_router.callback_query(F.data == "go_to_moderation")
async def show_moderation_button(callback: types.CallbackQuery):
    new_posts = get_new_posts()
    if not new_posts:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        await callback.message.edit_text(
            "–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
            reply_markup=keyboard
        )
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data="start_moderation")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await callback.message.edit_text(
        f"üì¨ –ü–æ–ª—É—á–µ–Ω–æ <b>{len(new_posts)}</b> –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.",
        reply_markup=keyboard
    )


@moderation_router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())


@moderation_router.callback_query(F.data == "start_moderation")
async def start_moderation(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    new_posts = get_new_posts()

    logger.info(f"üîé –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(new_posts)}")
    logger.info(f"üìù ID –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {new_posts}")

    if not new_posts:
        await callback.message.edit_text("–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        return

    create_session(admin_id, new_posts)
    logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {admin_id} —Å –ø–æ—Å—Ç–∞–º–∏: {new_posts}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    start_message = await callback.message.edit_text("–ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å ‚úÖ")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    await send_current_post(admin_id, callback.bot, callback.message.chat.id)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å" —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    await asyncio.sleep(1)
    try:
        await start_message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")


async def send_current_post(admin_id: int, bot, chat_id: int):
    post_id = get_current_post_for_admin(admin_id)

    if post_id is None:
        await bot.send_message(
            chat_id=chat_id,
            text="‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –∏–∑ —Å–µ—Å—Å–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        return

    post = get_post(post_id)
    if not post:
        advance_session(admin_id)
        await send_current_post(admin_id, bot, chat_id)
        return

    post_number = get_session_index(admin_id) + 1
    total = get_session_total(admin_id)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º styled_text (–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω Gemini), –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    post_text = post[3] if post[3] else post[2]

    text = f"<b>–ü–æ—Å—Ç {post_number} –∏–∑ {total}</b>\n\n{post_text}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_{post_id}"),
            InlineKeyboardButton(text="‚è≥ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"skip_{post_id}")
        ],
        [InlineKeyboardButton(text="üß† –û–±—Ä–∞–±–æ—Ç–∞—Ç—å (Gemini)", callback_data=f"gemini_{post_id}")],
        [InlineKeyboardButton(text="üóë –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{post_id}")]
    ])

    await bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard)


@moderation_router.callback_query(F.data.startswith(("publish_", "gemini_", "skip_", "decline_")))
async def handle_post_action(callback: types.CallbackQuery, state: FSMContext):
    admin_id = callback.from_user.id
    data = callback.data

    if data.startswith("publish_"):
        post_id = int(data.split("_")[1])
        post = get_post(post_id)
        if not post:
            await callback.message.edit_text("‚ö†Ô∏è –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å —Å—Ç–∏–ª–µ–º (–ø–æ—Å–ª–µ Gemini), –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        publish_text = post[3] if post[3] else post[2]

        await callback.bot.send_message(chat_id=TARGET_CHANNEL_ID, text=publish_text)
        set_post_status(post_id, "published")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ–º –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.delete()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        status_message = await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text="‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω."
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(status_message_id=status_message.message_id)

        advance_session(admin_id)
        await send_current_post(admin_id, callback.bot, callback.message.chat.id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        await asyncio.sleep(1)
        await status_message.delete()

    elif data.startswith("skip_"):
        post_id = int(data.split("_")[1])
        set_post_status(post_id, "skipped")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ–º
        await callback.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω)
        status_message = await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text="‚è≥ –ü–æ—Å—Ç –æ—Ç–ª–æ–∂–µ–Ω."
        )

        advance_session(admin_id)
        await send_current_post(admin_id, callback.bot, callback.message.chat.id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        await asyncio.sleep(1)
        await status_message.delete()

    elif data.startswith("gemini_"):
        post_id = int(data.split("_")[1])
        await state.update_data(post_id=post_id)
        await state.update_data(post_message_id=callback.message.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ—Å—Ç–æ–º
        await state.update_data(chat_id=callback.message.chat.id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ state
        await state.set_state(GeminiProcessing.waiting_for_comment)

        # –°–¥–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ —è–≤–Ω—ã–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω–∏–º–∞–ª, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
        instruction_message = await callback.message.answer(
            "üí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ Gemini –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(instruction_message_id=instruction_message.message_id)


    elif data.startswith("decline_"):
        post_id = int(data.split("_")[1])
        try:
            conn = sqlite3.connect("news.db", check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute("DELETE FROM news WHERE id = ?", (post_id,))
            conn.commit()
            conn.close()
            await callback.message.delete()
        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            return

        if get_current_post_for_admin(admin_id) is None:
            await callback.message.answer(
                "‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –∏–∑ —Å–µ—Å—Å–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        else:
            await send_current_post(admin_id, callback.bot, callback.message.chat.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è Gemini
@moderation_router.message(GeminiProcessing.waiting_for_comment)
async def handle_admin_comment(message: types.Message, state: FSMContext):
    logger.info(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    data = await state.get_data()
    logger.debug(f"FSM Data: {data}")
    post_id = data.get('post_id')
    chat_id = data.get('chat_id', message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ state –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
    instruction_message_id = data.get('instruction_message_id')  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π

    # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    if instruction_message_id:
        try:
            await message.bot.delete_message(chat_id=chat_id, message_id=instruction_message_id)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π: {e}")

    if not post_id:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ—Å—Ç–∞.")
        await state.clear()
        return

    post = get_post(post_id)
    if not post:
        await message.answer("‚ö†Ô∏è –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    raw_text = post[2]

    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å—Ç–∞ {post_id} —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: {message.text}")

    try:
        revised_text = revise_text_with_chatgpt(raw_text, message.text, post[1])
        logger.info(f"üì© Gemini –≤–µ—Ä–Ω—É–ª: {revised_text}")

        conn = sqlite3.connect("news.db", check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("UPDATE news SET styled_text = ?, status = ? WHERE id = ?", (revised_text, "pending", post_id))
        conn.commit()
        conn.close()

        # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –ø–æ—Å—Ç –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        success_message = await message.answer("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω Gemini. –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        post_message_id = data.get('post_message_id')
        if post_message_id:
            try:
                await message.bot.delete_message(chat_id=chat_id, message_id=post_message_id)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ–º: {e}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
        await send_current_post(message.from_user.id, message.bot, chat_id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await asyncio.sleep(1)
        await success_message.delete()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞: {e}")
        error_message = await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        await asyncio.sleep(3)  # –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await error_message.delete()

    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()